from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.contrib.middlewares.fsm import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import logging
import os
import mysql.connector
from mysql.connector import Error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
BOT_TOKEN = "8013691624:AAG0iXy9Ysd4K0ii_-ADwt33D0PVZsYypF4"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL 
def get_db_connection():
    try:
        connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="feedbacks"
        )
        return connection
    except Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∫–∞
class CallbackRequest(StatesGroup):
    name = State()  
    phone_number = State()  

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
class FeedbackForm(StatesGroup):
    rating = State()  
    feedback_text = State()  

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@dp.message_handler(commands=['start'])
async def main_menu(message: types.Message):
    welcome_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    buttons = [
        ["üè• –ö–ª–∏–Ω–∏–∫–∏", "‚ÑπÔ∏è –û –Ω–∞—Å"],
        ["üë®‚Äç‚öïÔ∏è –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã"],
        ["üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"],
        ["üìç –ê–¥—Ä–µ—Å–∞", "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]
    ]
    
    for row in buttons:
        keyboard.add(*row)
    
    await message.answer(welcome_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@dp.message_handler(text="üè• –ö–ª–∏–Ω–∏–∫–∏")
async def clinics_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [["GLORY DETOX", "FREEDOM DETOX"], ["–ù–∞–∑–∞–¥"]]
    
    for row in buttons:
        keyboard.add(*row)
    
    photo_path = "images/our.png"
    if os.path.exists(photo_path):
        with open(photo_path, "rb") as photo:
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=keyboard)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É:", reply_markup=keyboard)

@dp.message_handler(text="GLORY DETOX")
async def glory_detox_info(message: types.Message):
    info_text = (
        "<b>üè• GLORY DETOX</b>\n\n"
        "<b>–ê–¥—Ä–µ—Å:</b> –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç, —Ä–∞–π–æ–Ω –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫–∞, —É–ª–∏—Ü–∞ –§–µ—Ä—É–∑–∞, 32\n\n"
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> +998992002008"
    )
    photo_path = "images/our.png"
    if os.path.exists(photo_path):
        with open(photo_path, "rb") as photo:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=info_text,
                parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            )
    else:
        await message.answer(info_text, parse_mode="HTML")  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º HTML

@dp.message_handler(text="FREEDOM DETOX")
async def freedom_detox_info(message: types.Message):
    info_text = (
        "<b>üè• FREEDOM DETOX</b>\n\n"
        "<b>–ê–¥—Ä–µ—Å:</b> –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç, —Ä–∞–π–æ–Ω –û–ª–º–∞–∑–æ—Ä, –ê–ª–ª–æ–Ω –ú–§–ô, —É–ª–∏—Ü–∞ –§–∞—Ä–æ–±–∏–π, –¥–æ–º 320-–ê.\n\n"
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> +998777272277"
    )
    photo_path = "images/our.png"
    if os.path.exists(photo_path):
        with open(photo_path, "rb") as photo:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=info_text,
                parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º HTML
            )
    else:
        await message.answer(info_text, parse_mode="HTML")  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º HTML

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await main_menu(message)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë®‚Äç‚öïÔ∏è –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã"
@dp.message_handler(text="üë®‚Äç‚öïÔ∏è –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã")
async def specialists_menu(message: types.Message):
    info_text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º –ø–æ–±–ª–∏–∂–µ.</b>"
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        ["–ö–∞–≥—Ä–∞–º–∞–Ω—è–Ω –ö–∞—Ä–ª–µ–Ω –°—É—Ä–µ–Ω–æ–≤–∏—á"],
        ["–•–∞–Ω –ï–ª–µ–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞"],
        ["–ù—É—Ä–º–∞—Ç–æ–≤–∞ –§–∞—Ç–∏–º–∞ –ü—É–ª–∞—Ç–æ–≤–Ω–∞"],
        ["–ù–∞–∑–∞–¥"]
    ]
    
    for row in buttons:
        keyboard.add(*row)
    
    photo_path = "images/specialists.png"
    with open(photo_path, "rb") as photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=info_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–∞–≥—Ä–∞–º–∞–Ω—è–Ω –ö–∞—Ä–ª–µ–Ω –°—É—Ä–µ–Ω–æ–≤–∏—á"
@dp.message_handler(text="–ö–∞–≥—Ä–∞–º–∞–Ω—è–Ω –ö–∞—Ä–ª–µ–Ω –°—É—Ä–µ–Ω–æ–≤–∏—á")
async def psychologist_1_info(message: types.Message):
    info_text = (
        "<b>–ö–∞–≥—Ä–∞–º–∞–Ω—è–Ω –ö–∞—Ä–ª–µ–Ω –°—É—Ä–µ–Ω–æ–≤–∏—á</b> ‚Äî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å –±–æ–≥–∞—Ç—ã–º –æ–ø—ã—Ç–æ–º –≤ —Å—Ñ–µ—Ä–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω—ã.\n\n"
        "–û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–∞—à–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∏ –≤—ã–±—Ä–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
        "<i>–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –æ –≤—Ä–µ–º–µ–Ω–∏.</i>"
    )
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", url="tg://resolve?domain=maryfound")
    keyboard.add(button)
    
    photo_path = "images/karlen.jpg"
    with open(photo_path, "rb") as photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=info_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–•–∞–Ω –ï–ª–µ–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞"
@dp.message_handler(text="–•–∞–Ω –ï–ª–µ–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞")
async def psychologist_2_info(message: types.Message):
    info_text = (
        "<b>–•–∞–Ω –ï–ª–µ–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞</b> ‚Äî –ü—Å–∏—Ö–∏–∞—Ç—Ä-–Ω–∞—Ä–∫–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 30 –ª–µ—Ç.\n\n"
        "–û–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–º–æ—â—å –ª—é–¥—è–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.\n\n"
        "<i>–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.</i>"
    )
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", url="tg://resolve?domain=maryfound")
    keyboard.add(button)
    
    photo_path = "images/elena.jpg"
    with open(photo_path, "rb") as photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=info_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù—É—Ä–º–∞—Ç–æ–≤–∞ –§–∞—Ç–∏–º–∞ –ü—É–ª–∞—Ç–æ–≤–Ω–∞"
@dp.message_handler(text="–ù—É—Ä–º–∞—Ç–æ–≤–∞ –§–∞—Ç–∏–º–∞ –ü—É–ª–∞—Ç–æ–≤–Ω–∞")
async def psychologist_3_info(message: types.Message):
    info_text = (
        "<b>–ù—É—Ä–º–∞—Ç–æ–≤–∞ –§–∞—Ç–∏–º–∞ –ü—É–ª–∞—Ç–æ–≤–Ω–∞</b> ‚Äî –°—Ç–∞—Ä—à–∞—è –º–µ–¥. —Å–µ—Å—Ç—Ä–∞ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 19 –ª–µ—Ç.\n\n"
        "–û–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –ª–µ—á–µ–Ω–∏—è.\n\n"
        "<i>–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.</i>"
    )
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", url="tg://resolve?domain=maryfound")
    keyboard.add(button)
    
    photo_path = "images/fatima.jpg"
    with open(photo_path, "rb") as photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=info_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìç –ê–¥—Ä–µ—Å–∞"
@dp.message_handler(text="üìç –ê–¥—Ä–µ—Å–∞")
async def locations(message: types.Message):
    info_text = (
        "<b>–ù–∞—à–∏ –∫–ª–∏–Ω–∏–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞–¥—Ä–µ—Å–∞–º:</b>\n\n"
        "1. <b>GLORY DETOX</b> ‚Äî –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç, —Ä–∞–π–æ–Ω –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫–∞, —É–ª–∏—Ü–∞ –§–µ—Ä—É–∑–∞, 32\n\n"
        "2. <b>FREEDOM DETOX</b> ‚Äî –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç, —Ä–∞–π–æ–Ω –û–ª–º–∞–∑–æ—Ä, –ê–ª–ª–æ–Ω –ú–§–ô, —É–ª–∏—Ü–∞ –§–∞—Ä–æ–±–∏–π, –¥–æ–º 320-–ê."
    )
    photo_path = "images/address.png"
    with open(photo_path, "rb") as photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=info_text,
            parse_mode="HTML"
        )

@dp.message_handler(text="‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: types.Message):
    info_text = (
        "<b>–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ —Å—Ñ–µ—Ä–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ –∏ –Ω–∞—Ä–∫–æ–ª–æ–≥–∏–∏.</b>\n\n"
        "<b>–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>\n"
        "üîπ <i>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ</i>\n"
        "üîπ <i>–ü–æ–º–æ—â—å –ø—Ä–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö</i>\n"
        "üîπ <i>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</i>\n\n"
        "<b>–ù–∞—à–∏ –∫–ª–∏–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏,</b> "
        "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –Ω–∞ –ø—É—Ç–∏ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é.\n\n"
        "<b>–ù–∞—à —Å–∞–π—Ç:</b> <a href='https://narkologicheskaya-klinika.uz/'>narkologicheskaya-klinika.uz</a>"
    )
    photo_path = "images/aboutus.png"
    with open(photo_path, "rb") as photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=info_text,
            parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
@dp.message_handler(text="üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_menu(message: types.Message):
    info_text = "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É –í–∞—Å –∑–∞–ø—Ä–æ—Å, –≤—ã–±—Ä–∞–≤ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É:"
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [["üñäÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫"], ["–ù–∞–∑–∞–¥"]]
    
    for row in buttons:
        keyboard.add(*row)
    
    await message.answer(info_text, reply_markup=keyboard)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üñäÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.message_handler(text="üñäÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def leave_feedback(message: types.Message):
    info_text = (
        "<b>–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b> - —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å, "
        "–≤–µ–¥—å –æ–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç—Ä–∞–∂–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ —Å–µ–∞–Ω—Å–µ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n\n"
        "<b>–û—Ü–µ–Ω–∏—Ç–µ –ø–æ 5-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ –í–∞—à –≤–∏–∑–∏—Ç:</b>"
    )
    
    # Inline keyboard for rating buttons (1 to 5)
    inline_keyboard = InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        button = InlineKeyboardButton(text=str(i), callback_data=f"feedback_{i}")
        inline_keyboard.add(button)

    # Regular keyboard for the "Cancel" button
    cancel_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_button = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    cancel_keyboard.add(cancel_button)

    # Send message with rating buttons and cancel button
    await message.answer(info_text, reply_markup=inline_keyboard, parse_mode="HTML")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å.", reply_markup=cancel_keyboard)

    await FeedbackForm.rating.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", state="*")
async def cancel_feedback(message: types.Message, state: FSMContext):
    """
    Handle the 'Cancel' button globally and return to the main menu.
    """
    await state.finish()  # Clear any active state
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
    await main_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
@dp.callback_query_handler(lambda query: query.data.startswith("feedback_"), state=FeedbackForm.rating)
async def feedback_score_callback(query: types.CallbackQuery, state: FSMContext):
    score = int(query.data.split("_")[1])
    await state.update_data(rating=score)
    await bot.send_message(chat_id=query.message.chat.id, text="<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, —Ç–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤</b> –ø–æ —Ç–æ–º—É, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∏–∑–∏—Ç.", parse_mode="HTML")
    await bot.edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    await FeedbackForm.feedback_text.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
@dp.message_handler(state=FeedbackForm.feedback_text)
async def service_feedback(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    service_feedback = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    rating = state_data.get("rating")
    
    if not service_feedback:
        await message.answer("–í—ã –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤. –í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        connection = get_db_connection()
        if connection:
            try:
                db_cursor = connection.cursor()
                query = "INSERT INTO reviews (user_id, rating, service_feedback) VALUES (%s, %s, %s)"
                values = (user_id, rating, service_feedback)
                db_cursor.execute(query, values)
                connection.commit()
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
            except Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            finally:
                connection.close()
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await main_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await main_menu(message)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∫–∞
class CallRequest(StatesGroup):
    name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏
    phone_number = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫"
@dp.message_handler(text="–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫")
async def request_call(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_button = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    keyboard.add(cancel_button)

    await message.answer("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=keyboard)
    await CallRequest.name.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–º–µ–Ω–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–º–µ–Ω–∏
@dp.message_handler(state=CallRequest.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if name.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
        await main_menu(message)
    else:
        await state.update_data(name=name)
        phone_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        phone_button = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        cancel_button = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        phone_keyboard.add(phone_button) 
        phone_keyboard.add(cancel_button)  

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard)
        await CallRequest.phone_number.set()  

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
@dp.message_handler(content_types=types.ContentType.CONTACT, state=CallRequest.phone_number)
async def process_phone_number_from_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    user_data = await state.get_data()
    name = user_data.get("name")
    
    connection = get_db_connection()
    if connection:
        try:
            db_cursor = connection.cursor()
            query = "INSERT INTO calls (user_id, name, phone_number) VALUES (%s, %s, %s)"
            values = (message.chat.id, name, phone_number)
            db_cursor.execute(query, values)
            connection.commit()
            await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")
        except Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        finally:
            connection.close()

    await state.finish()  
    await main_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é
@dp.message_handler(state=CallRequest.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()
    if phone_number.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
        await main_menu(message)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        name = user_data.get("name")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        connection = get_db_connection()
        if connection:
            try:
                db_cursor = connection.cursor()
                query = "INSERT INTO calls (user_id, name, phone_number) VALUES (%s, %s, %s)"
                values = (message.chat.id, name, phone_number)
                db_cursor.execute(query, values)
                connection.commit()
                await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")
            except Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            finally:
                connection.close()

        await state.finish()  
        await main_menu(message)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)